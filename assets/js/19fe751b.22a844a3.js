"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3874],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>g});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),f=l(r),p=i,g=f["".concat(c,".").concat(p)]||f[p]||u[p]||o;return r?n.createElement(g,a(a({ref:t},d),{},{components:r})):n.createElement(g,a({ref:t},d))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[f]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7699:(e,t,r)=>{r.r(t),r.d(t,{Difftests:()=>u,DifftestsCore:()=>p,DifftestsTestclient:()=>g,assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>s,metadata:()=>l,toc:()=>f});var n=r(7462),i=r(7294),o=r(3905),a=r(3530);const s={title:"The cargo-difftests family",sidebar_position:4},c=void 0,l={unversionedId:"dev-crates/cargo-difftests",id:"dev-crates/cargo-difftests",title:"The cargo-difftests family",description:", {DifftestsCore} and {DifftestsTestclient}.",source:"@site/contributor-guide/dev-crates/cargo-difftests.mdx",sourceDirName:"dev-crates",slug:"/dev-crates/cargo-difftests",permalink:"/contributor-guide/dev-crates/cargo-difftests",draft:!1,editUrl:"https://github.com/dnbln/upsilon/blob/trunk/docs/contributor-guide/dev-crates/cargo-difftests.mdx",tags:[],version:"current",lastUpdatedBy:"Dinu Blanovschi",lastUpdatedAt:1677931828,formattedLastUpdatedAt:"Mar 4, 2023",sidebarPosition:4,frontMatter:{title:"The cargo-difftests family",sidebar_position:4},sidebar:"contributor_guideSidebar",previous:{title:"upsilon-shell",permalink:"/contributor-guide/dev-crates/upsilon-shell"},next:{title:"cargo-guard",permalink:"/contributor-guide/dev-crates/cargo-guard"}},d={},f=[{value:"<code>cargo-difftests-core</code>",id:"cargo-difftests-core",level:2},{value:"<code>cargo-difftests-testclient</code>",id:"cargo-difftests-testclient",level:2},{value:"<code>cargo-difftests</code>",id:"cargo-difftests",level:2}];let u=(0,o.kt)(a.Z,{crate:"cargo-difftests",kind:"dev",mdxType:"CrateSourceLink"}),p=(0,o.kt)(a.Z,{crate:"cargo-difftests-core",kind:"dev",mdxType:"CrateSourceLink"}),g=(0,o.kt)(a.Z,{crate:"cargo-difftests-testclient",kind:"dev",mdxType:"CrateSourceLink"});const m={toc:f,Difftests:u},h="wrapper";function b(e){let{components:t,...r}=e;return(0,o.kt)(h,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(i.Fragment,null,u,", ",p," and ",g,"."),(0,o.kt)("h2",{id:"cargo-difftests-core"},(0,o.kt)("inlineCode",{parentName:"h2"},"cargo-difftests-core")),(0,o.kt)(i.Fragment,null,"Source: ",p,"."),(0,o.kt)("p",null,"Some common types and declarations used by both ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo-difftests")," and\n",(0,o.kt)("inlineCode",{parentName:"p"},"cargo-difftests-testclient"),"."),(0,o.kt)("h2",{id:"cargo-difftests-testclient"},(0,o.kt)("inlineCode",{parentName:"h2"},"cargo-difftests-testclient")),(0,o.kt)(i.Fragment,null,"Source: ",g,"."),(0,o.kt)("p",null,"A small library that initializes a directory for every test with\nsome information about the test, along with setting up the process to use it\nas the output for the profiling files, to be able to check and rerun it\nlater if necessary."),(0,o.kt)("h2",{id:"cargo-difftests"},(0,o.kt)("inlineCode",{parentName:"h2"},"cargo-difftests")),(0,o.kt)(i.Fragment,null,"Source: ",u,"."),(0,o.kt)("p",null,"The analyzer program. It is a cargo plugin that will print out verdicts for\nall the difftests that it discovers (from the directories passed to\n",(0,o.kt)("inlineCode",{parentName:"p"},"cargo-difftests-testclient"),"), and the caller can then use that to decide\nwhich tests need to be rerun."),(0,o.kt)("p",null,"For more information on how to use this, run ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo difftests --help"),"."),(0,o.kt)("p",null,"This plugin is invoked by ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo xtask")," during the ",(0,o.kt)("inlineCode",{parentName:"p"},"test-quick")," xtask to\ndecide which integration tests need to be rerun."))}b.isMDXComponent=!0},3530:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(7294),i=r(9031);function o(e){let{crate:t,kind:r,gitref:o}=e,a=`${r}/${t}`;return n.createElement(i.Z,{gitref:o,kind:"tree",path:a,children:[n.createElement("code",null,t)]})}},9031:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(7294);const i="trunk";function o(e){let{gitref:t,path:r,kind:o,children:a}=e,s=`https://github.com/dnbln/upsilon/${o}/${t||i}/${r}`;return n.createElement("a",{href:s},a)}}}]);