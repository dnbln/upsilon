"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[34],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(n),d=r,g=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return n?i.createElement(g,a(a({ref:t},p),{},{components:n})):i.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[u]="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const o={sidebar_position:4},a="Interacting with git / libgit2",c={unversionedId:"architecture/git",id:"architecture/git",title:"Interacting with git / libgit2",description:"All the code that interacts with the git binary, or with libgit2, lies in",source:"@site/contributor-guide/architecture/git.md",sourceDirName:"architecture",slug:"/architecture/git",permalink:"/contributor-guide/architecture/git",draft:!1,editUrl:"https://github.com/dnbln/upsilon/tree/trunk/docs/contributor-guide/architecture/git.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"API",permalink:"/contributor-guide/architecture/api"},next:{title:"Testing",permalink:"/contributor-guide/architecture/testing"}},l={},s=[{value:"<code>upsilon-vcs</code>",id:"upsilon-vcs",level:2},{value:"<code>upsilon-git-hooks</code>",id:"upsilon-git-hooks",level:2},{value:"<code>upsilon-git-protocol-accesshook</code>",id:"upsilon-git-protocol-accesshook",level:2}],p={toc:s},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interacting-with-git--libgit2"},"Interacting with ",(0,r.kt)("inlineCode",{parentName:"h1"},"git")," / ",(0,r.kt)("inlineCode",{parentName:"h1"},"libgit2")),(0,r.kt)("p",null,"All the code that interacts with the ",(0,r.kt)("inlineCode",{parentName:"p"},"git")," binary, or with ",(0,r.kt)("inlineCode",{parentName:"p"},"libgit2"),", lies in\nthe following crates:"),(0,r.kt)("h2",{id:"upsilon-vcs"},(0,r.kt)("inlineCode",{parentName:"h2"},"upsilon-vcs")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"upsilon-vcs")," is the only crate in the main server process that interacts\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"libgit2"),", all the other crates use ",(0,r.kt)("inlineCode",{parentName:"p"},"upsilon-vcs")," to talk to ",(0,r.kt)("inlineCode",{parentName:"p"},"libgit2"),"."),(0,r.kt)("p",null,"As such, all the needed functionality of the webserver as far as git is\nconcerned happens through this crate, including set-up of repos."),(0,r.kt)("p",null,"It is also responsible for spawning ",(0,r.kt)("inlineCode",{parentName:"p"},"git")," processes, like ",(0,r.kt)("inlineCode",{parentName:"p"},"git-http-backend"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"git-daemon")," to handle incoming requests, when necessary."),(0,r.kt)("h2",{id:"upsilon-git-hooks"},(0,r.kt)("inlineCode",{parentName:"h2"},"upsilon-git-hooks")),(0,r.kt)("p",null,"This is a binary crate, which is invoked by the various hooks in\n",(0,r.kt)("inlineCode",{parentName:"p"},"git-http-backend")," and/or ",(0,r.kt)("inlineCode",{parentName:"p"},"git-daemon"),", and is responsible for telling the\nwebserver what is actually happening in the repository. It also has the job of\nrejecting specific actions, for example GitHub has protected branches, and won't\nallow certain actions on them. This is done by passing the repo config from\nthe webserver to the hook, through the ",(0,r.kt)("inlineCode",{parentName:"p"},"UPSILON_REPO_CONFIG"),"\nenvironment variable, which is then read by the hook (serialized JSON)."),(0,r.kt)("h2",{id:"upsilon-git-protocol-accesshook"},(0,r.kt)("inlineCode",{parentName:"h2"},"upsilon-git-protocol-accesshook")),(0,r.kt)("p",null,"Passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"--access-hook")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"git-daemon"),"."))}h.isMDXComponent=!0}}]);