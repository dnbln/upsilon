scalar UserId

type OrganizationMember {
  userId: UserId!
  organizationId: OrganizationId!
  teamIds: [TeamId!]!
  user: User!
  organization: Organization!
  teams: [Team!]!
}

type SubscriptionRoot {
  helloWorld: String!
}

scalar PlainPassword

scalar ImageAssetId

type Repo implements Entity {
  id: RepoId!
  entityId: String!
  entityUser: User
  entityRepo: Repo
  entityOrganization: Organization
  entityTeam: Team
  name: RepoName!
  path: String!
  git: RepoGit!
}

type GitCommit {
  sha: String!
  message: String
  author: GitSignature!
  committer: GitSignature!
  parents: [GitCommit!]!
  parent(i: Int = 0): GitCommit!
  tree: GitTree!
  blobString(path: String!): String
}

scalar TeamName

scalar Email

type MutationRoot {
  createUser(username: Username!, email: Email!, password: PlainPassword!): String!
  _debug__createTestUser(username: Username!, email: Email!, password: PlainPassword!): String!
  login(usernameOrEmail: String!, password: PlainPassword!): String!
  _debug__loginTestUser(usernameOrEmail: String!, password: PlainPassword!): String!
  createOrganization(name: OrganizationName!): Organization!
  createRepo(name: RepoName!): Repo!
  createRepoInOrganization(name: RepoName!, organizationId: OrganizationId!): Repo!
  createRepoInTeam(name: RepoName!, teamId: TeamId!): Repo!
  _debug__globalMirror(name: String!, url: String!): Repo!
  _debug__silentInitGlobal(name: String!): Repo!
  _debug__cpGlrFromLocal(name: String!, localPath: String!): Repo!
  addUserRepoPerms(repo: RepoId!, user: UserId!, perms: RepoPermissions!): RepoPermissions!
  rmUserRepoPerms(repo: RepoId!, user: UserId!, perms: RepoPermissions!): RepoPermissions!
  addUserSshKey(key: String!): Boolean!
}

type GitDiffStats {
  filesChanged: Int!
  insertions: Int!
  deletions: Int!
}

scalar UserDisplayName

scalar RepoPermissions

scalar TeamDisplayName

type RepoGit {
  commit(sha: String!): GitCommit!
  branch(name: String!): GitBranch!
  revspec(revspec: String!): GitRevspec!
}

type GitBranch {
  name: String
  commit: GitCommit!
  _debug__contributors: [GitSignatureContributions!]!
}

scalar Username

type GitTreeEntry {
  name: String!
}

interface Entity {
  entityId: String!
  entityUser: User
  entityOrganization: Organization
  entityTeam: Team
  entityRepo: Repo
}

type QueryRoot {
  apiVersion: String!
  ushCliArgs: [String!]!
  user(userId: UserId!): User!
  viewer: User
  userByUsername(username: Username!): User
  organization(orgId: OrganizationId!): Organization!
  organizationByName(name: OrganizationName!): Organization
  repo(repoId: RepoId!): Repo!
  lookupEntity(path: String!): Entity
  lookupRepo(path: String!): Repo
}

type GitSignature {
  name: String
  email: String
  user: User
}

type GitDiffFile {
  oldPath: String!
  newPath: String!
  hunks: [GitDiffHunk!]!
}

scalar OrganizationDisplayName

type GitDiff {
  stats: GitDiffStats!
  files: [GitDiffFile!]!
}

type GitDiffHunk {
  oldStart: Int!
  oldLines: Int!
  newStart: Int!
  newLines: Int!
  lines: [GitDiffLine!]!
}

scalar OrganizationId

type Team implements Entity {
  id: TeamId!
  entityId: String!
  entityUser: User
  entityRepo: Repo
  entityOrganization: Organization
  entityTeam: Team
  name: TeamName!
  displayName: TeamDisplayName
  organizationId: OrganizationId!
  organization: Organization!
  members: [OrganizationMember!]!
  repo(name: RepoName!): Repo
}

scalar OrganizationName

type GitTree {
  entries(wholeTree: Boolean = false): [GitTreeEntry!]!
}

type GitDiffLine {
  oldLineno: Int
  newLineno: Int
  content: String!
  lineType: String!
}

type Organization implements Entity {
  id: OrganizationId!
  entityId: String!
  entityUser: User
  entityRepo: Repo
  entityOrganization: Organization
  entityTeam: Team
  name: OrganizationName!
  displayName: OrganizationDisplayName
  ownerId: UserId!
  owner: User!
  members: [OrganizationMember!]!
  teams: [Team!]!
  repo(name: RepoName!): Repo
}

scalar RepoName

scalar RepoId

type User implements Entity {
  id: UserId!
  entityId: String!
  entityUser: User
  entityRepo: Repo
  entityOrganization: Organization
  entityTeam: Team
  username: Username!
  publicEmail: Email
  avatar: ImageAssetId
  displayName: UserDisplayName
  repo(name: RepoName!): Repo
  organizations: [OrganizationMember!]!
}

type GitSignatureContributions {
  email: String!
  user: User
  contributions: Int!
}

type GitRevspec {
  commitFrom: GitCommit
  commitTo: GitCommit
  diff: GitDiff
}

scalar TeamId

schema {
  query: QueryRoot
  mutation: MutationRoot
  subscription: SubscriptionRoot
}
