// @generated by dev/upsilon-xtask/src/bin/upsilon-xtask/langmap.rs - DO NOT EDIT
import type {Lang} from './langMap';
import rust_hljs from 'svelte-highlight/languages/rust';
import markdown_hljs from 'svelte-highlight/languages/markdown';
import javascript_hljs from 'svelte-highlight/languages/javascript';
import typescript_hljs from 'svelte-highlight/languages/typescript';
import ini_hljs from 'svelte-highlight/languages/ini';
import plaintext_hljs from 'svelte-highlight/languages/plaintext';

const LANGS: {[keys: string]: Lang} = {
rust: {
id: 'rust', 
name: 'Rust', 
hljs: 'rust', 
hljs_def: rust_hljs, 
parent: 'text', 
icon: 'rust', 
matcher: (file_path: string, file_name: string) => {
    return ((file_name.endsWith('.rs')));
},
},
cargo_toml: {
id: 'cargo_toml', 
name: 'Cargo.toml', 
parent: 'toml', 
icon: 'cargo-toml', 
matcher: (file_path: string, file_name: string) => {
    return ((file_name == 'Cargo.toml'));
},
},
cargo_lock: {
id: 'cargo_lock', 
name: 'Cargo.lock', 
parent: 'toml', 
icon: 'cargo-lock', 
matcher: (file_path: string, file_name: string) => {
    return ((file_name == 'Cargo.lock'));
},
},
markdown: {
id: 'markdown', 
name: 'Markdown', 
hljs: 'markdown', 
hljs_def: markdown_hljs, 
parent: 'text', 
icon: 'markdown', 
matcher: (file_path: string, file_name: string) => {
    return ((file_name.endsWith('.md')) || (file_name.endsWith('.markdown')));
},
},
javascript: {
id: 'javascript', 
name: 'JavaScript', 
hljs: 'javascript', 
hljs_def: javascript_hljs, 
parent: 'text', 
icon: 'javascript', 
matcher: (file_path: string, file_name: string) => {
    return ((file_name.endsWith('.js')));
},
},
typescript: {
id: 'typescript', 
name: 'TypeScript', 
hljs: 'typescript', 
hljs_def: typescript_hljs, 
parent: 'text', 
icon: 'typescript', 
matcher: (file_path: string, file_name: string) => {
    return ((file_name.endsWith('.ts')));
},
},
toml: {
id: 'toml', 
name: 'TOML', 
hljs: 'ini', 
hljs_def: ini_hljs, 
parent: 'text', 
icon: 'toml', 
children: [
'cargo_toml',
'cargo_lock',
],
matcher: (file_path: string, file_name: string) => {
    return ((file_name.endsWith('.toml')));
},
},
text: {
id: 'text', 
name: 'Text', 
hljs: 'plaintext', 
hljs_def: plaintext_hljs, 
icon: 'text', 
children: [
'rust',
'markdown',
'javascript',
'typescript',
'toml',
],
matcher: (file_path: string, file_name: string) => {
    return true;
},
},

};

const lookupAmongChildren = (file_path: string, file_name: string, children: string[]): Lang | null => {
	for (const child of children) {
		const lang = LANGS[child];
		if ((lang.matcher)(file_path, file_name)) {
			if (lang.children) {
				return lookupAmongChildren(file_path, file_name, lang.children) ?? lang;
			} else {
				return lang;
			}
		}
	}
	return null;
}

export const lookupLangmap = (path: string): Lang => {
	const file_path = path;
	const file_name = path.split('/').pop()!;

	return lookupAmongChildren(file_path, file_name, LANGS.text.children!) ?? LANGS.text;
};

export const lookupHljsLangImpl = (lang: Lang): any => {
	while (!lang.hljs && lang.parent) {
		lang = LANGS[lang.parent];
	}

	return lang.hljs_def;
};
